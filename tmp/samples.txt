    //cv::Mat1b test(4, 4);
    //test << 255, 0, 255, 0,
    //        0, 255, 0, 255,
    //        255, 0, 255, 0,
    //        0, 255, 0, 255;

    //imwrite("test.png", test);
    //return 0;

    //tree_loader tl;
    //tl.load_tree(ifstream("../doc/t1.txt"));
    //ltree t1 = tl.t;

    //DrawDagOnFile("original_tree", t1, true);

    //Tree2DagUsingIdentities(t1);
    //DrawDagOnFile("dag_with_eq", t1, true);

    //Tree2OptimalDag(t1);
    //DrawDagOnFile("optimal_dag", t1, true);

    //
    ///*ofstream os("prova_codice.txt");
    //GenerateCode(os, t1);*/

    ////t1.preorder(print_node);
    //return 0;



    vector<string> dataset_paths = { "." };
    //string base_path = "C://Users//Federico Bolelli//Desktop//YACCLAB//bin//input//";
    //vector<string> dataset_paths = { base_path + "3dpes", base_path + "fingerprints", base_path + "hamlet", base_path + "medical", base_path + "mirflickr", base_path + "random//classical", base_path + "tobacco800", base_path + "xdocs"};

    // Set to true to use freq file, otherwise all freq will be considered equal to 1
    if (false) {
        string freq_file = "freqs.txt";
        if (!LoadFrequenciesFromFile(freq_file, labeling_bbdt)) {
            cout << "Calculate frequencies..." << endl;
            CalculateRulesFrequencies(grana_mask, dataset_paths, labeling_bbdt);
            cout << "Calculate frequencies...DONE" << endl;
            StoreFrequenciesOnFile(freq_file, labeling_bbdt);
        }
    }



    set<const ltree::node*> visited_nodes, visited_leaves;
    CountDagNodes(t.root, visited_nodes, visited_leaves);
    cout << "Nodes = " << visited_nodes.size() << "\n";
    cout << "Leaves = " << visited_leaves.size() << "\n";

    DrawDagOnFile("bbdt_tree", t, true);

    TreePathFreq tpf;
    tpf.Generate(t,labeling_bbdt);

    ofstream os("verifica.txt");
    for (uint i = 0; i < tpf.paths_freq.size(); ++i) {
        bitset<16> bs(i);
        os << i << ", " << bs << ", " << tpf.paths_freq[i] << "\n";
    }
    os.close();

    LOG("Creating DRAG using identites",
        Tree2DagUsingIdentities(t);
    );

    DrawDagOnFile("bbdt_dag_identites", t, true);

    visited_nodes.clear();
    visited_leaves.clear();
    CountDagNodes(t.root, visited_nodes, visited_leaves);
    cout << "Nodes = " << visited_nodes.size() << "\n";
    cout << "Leaves = " << visited_leaves.size() << "\n";

    //Tree2OptimalDag(t);
    Tree2OptimalDagFreq(t, tpf);
    DrawDagOnFile("optimal_dag", t, true);

    visited_nodes.clear();
    visited_leaves.clear();
    CountDagNodes(t.root, visited_nodes, visited_leaves);
    cout << "Nodes = " << visited_nodes.size() << "\n";
    cout << "Leaves = " << visited_leaves.size() << "\n";

    LOG("Writing DRAG code",
    {
        ofstream os("bbdt_drag_code.txt");
        GenerateCode(os, t);
    }
    );